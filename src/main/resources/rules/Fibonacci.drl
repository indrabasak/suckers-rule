import com.basaki.rules.model.Fibonacci;

dialect "mvel"

rule Recurse
    salience 10
    when
        f : Fibonacci ( value == -1 )
        not ( Fibonacci ( sequence == 1 ) )
    then
        insert( new Fibonacci( f.sequence - 1 ) );
        System.out.println( "recurse for " + f.sequence );
end

rule BootstrapFibonacci
    when
        f : Fibonacci( sequence == 1 || == 2, value == -1 ) // this is a multi-restriction || on a single field
    then
        modify ( f ){ value = 1 };
        System.out.println( "bootstrap " + f.sequence + " == " + f.value );
end

rule Calculate
    when
        f1 : Fibonacci( s1 : sequence, value != -1 ) // here we bind sequence
        f2 : Fibonacci( s2: sequence == (s1 + 1 ), value != -1 ) // here we don't, just to demonstrate the different way bindings can be used
        f3 : Fibonacci( s3 : sequence == (s2 + 1 ), value == -1 )
    then
        modify ( f3 ) { value = f1.value + f2.value };
        System.out.println( " calculate " + s3 + " == " + f3.value ); // see how you can access pattern and field  bindings
end